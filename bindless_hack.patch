diff --git a/renderdoc/driver/gl/gl_common.h b/renderdoc/driver/gl/gl_common.h
index 8cc482a55..3fc105672 100644
--- a/renderdoc/driver/gl/gl_common.h
+++ b/renderdoc/driver/gl/gl_common.h
@@ -2167,6 +2167,15 @@ enum class GLChunk : uint32_t
   glBlendEquationARB,
   glPrimitiveBoundingBoxARB,
 
+  glGetTextureHandleARB,
+  glGetTextureSamplerHandleARB,
+  glGetImageHandleARB,
+  glSetHandleRangeRDOC,
+  glMakeTextureHandleResidentARB,
+  glMakeTextureHandleNonResidentARB,
+  glMakeImageHandleResidentARB,
+  glMakeImageHandleNonResidentARB,
+
   Max,
 };
 
diff --git a/renderdoc/driver/gl/gl_dispatch_table.h b/renderdoc/driver/gl/gl_dispatch_table.h
index 71fa70090..72fb6e0d1 100644
--- a/renderdoc/driver/gl/gl_dispatch_table.h
+++ b/renderdoc/driver/gl/gl_dispatch_table.h
@@ -720,6 +720,16 @@ struct GLDispatchTable
   PFNGLACQUIREKEYEDMUTEXWIN32EXTPROC glAcquireKeyedMutexWin32EXT;
   PFNGLRELEASEKEYEDMUTEXWIN32EXTPROC glReleaseKeyedMutexWin32EXT;
 
+  // ARB_bindless_texture
+  PFNGLGETTEXTUREHANDLEARBPROC glGetTextureHandleARB;
+  PFNGLGETTEXTURESAMPLERHANDLEARBPROC glGetTextureSamplerHandleARB;
+  PFNGLGETIMAGEHANDLEARBPROC glGetImageHandleARB;
+  PFNGLSETHANDLERANGERDOCPROC glSetHandleRangeRDOC;
+  PFNGLMAKETEXTUREHANDLERESIDENTARBPROC glMakeTextureHandleResidentARB;
+  PFNGLMAKETEXTUREHANDLENONRESIDENTARBPROC glMakeTextureHandleNonResidentARB;
+  PFNGLMAKEIMAGEHANDLERESIDENTARBPROC glMakeImageHandleResidentARB;
+  PFNGLMAKEIMAGEHANDLENONRESIDENTARBPROC glMakeImageHandleNonResidentARB;
+
   // EXT_direct_state_access below here. We only include the functions relevant for core 3.2+ GL,
   // not any functions for legacy functionality.
   //
diff --git a/renderdoc/driver/gl/gl_dispatch_table_defs.h b/renderdoc/driver/gl/gl_dispatch_table_defs.h
index ea383b57e..b5e9d9e8c 100644
--- a/renderdoc/driver/gl/gl_dispatch_table_defs.h
+++ b/renderdoc/driver/gl/gl_dispatch_table_defs.h
@@ -1048,6 +1048,14 @@
   FUNC(glImportSemaphoreWin32NameEXT, glImportSemaphoreWin32NameEXT); \
   FUNC(glAcquireKeyedMutexWin32EXT, glAcquireKeyedMutexWin32EXT); \
   FUNC(glReleaseKeyedMutexWin32EXT, glReleaseKeyedMutexWin32EXT); \
+  FUNC(glGetTextureHandleARB, glGetTextureHandleARB); \
+  FUNC(glGetTextureSamplerHandleARB, glGetTextureSamplerHandleARB); \
+  FUNC(glGetImageHandleARB, glGetImageHandleARB); \
+  FUNC(glSetHandleRangeRDOC, glSetHandleRangeRDOC); \
+  FUNC(glMakeTextureHandleResidentARB, glMakeTextureHandleResidentARB); \
+  FUNC(glMakeTextureHandleNonResidentARB, glMakeTextureHandleNonResidentARB); \
+  FUNC(glMakeImageHandleResidentARB, glMakeImageHandleResidentARB); \
+  FUNC(glMakeImageHandleNonResidentARB, glMakeImageHandleNonResidentARB); \
   FUNC(glCompressedTextureImage1DEXT, glCompressedTextureImage1DEXT); \
   FUNC(glCompressedTextureImage2DEXT, glCompressedTextureImage2DEXT); \
   FUNC(glCompressedTextureImage3DEXT, glCompressedTextureImage3DEXT); \
@@ -2309,6 +2317,14 @@
   FuncWrapper3(void, glImportSemaphoreWin32NameEXT, GLuint, semaphore, GLenum, handleType, const void *, name); \
   FuncWrapper3(GLboolean, glAcquireKeyedMutexWin32EXT, GLuint, memory, GLuint64, key, GLuint, timeout); \
   FuncWrapper2(GLboolean, glReleaseKeyedMutexWin32EXT, GLuint, memory, GLuint64, key); \
+  FuncWrapper1(GLuint64, glGetTextureHandleARB, GLuint, texture); \
+  FuncWrapper2(GLuint64, glGetTextureSamplerHandleARB, GLuint, texture, GLuint, sampler); \
+  FuncWrapper5(GLuint64, glGetImageHandleARB, GLuint, texture, GLint, level, GLboolean, layered, GLint, layer, GLenum, format); \
+  FuncWrapper3(void, glSetHandleRangeRDOC, GLuint, buffer, GLuint64, offset, GLuint64, range); \
+  FuncWrapper1(void, glMakeTextureHandleResidentARB, GLuint64, handle); \
+  FuncWrapper1(void, glMakeTextureHandleNonResidentARB, GLuint64, handle); \
+  FuncWrapper2(void, glMakeImageHandleResidentARB, GLuint64, handle, GLenum, access); \
+  FuncWrapper1(void, glMakeImageHandleNonResidentARB, GLuint64, handle); \
   FuncWrapper8(void, glCompressedTextureImage1DEXT, GLuint, texture, GLenum, target, GLint, level, GLenum, internalformat, GLsizei, width, GLint, border, GLsizei, imageSize, const void *, bits); \
   FuncWrapper9(void, glCompressedTextureImage2DEXT, GLuint, texture, GLenum, target, GLint, level, GLenum, internalformat, GLsizei, width, GLsizei, height, GLint, border, GLsizei, imageSize, const void *, bits); \
   FuncWrapper10(void, glCompressedTextureImage3DEXT, GLuint, texture, GLenum, target, GLint, level, GLenum, internalformat, GLsizei, width, GLsizei, height, GLsizei, depth, GLint, border, GLsizei, imageSize, const void *, bits); \
@@ -3060,7 +3076,6 @@
   FUNC(glGetHistogramParameteriv); \
   FUNC(glGetHistogramParameterxvOES); \
   FUNC(glGetHistogram); \
-  FUNC(glGetImageHandleARB); \
   FUNC(glGetImageHandleNV); \
   FUNC(glGetImageTransformParameterfvHP); \
   FUNC(glGetImageTransformParameterivHP); \
@@ -3217,10 +3232,8 @@
   FUNC(glGetTexLevelParameterxvOES); \
   FUNC(glGetTexParameterPointervAPPLE); \
   FUNC(glGetTexParameterxvOES); \
-  FUNC(glGetTextureHandleARB); \
   FUNC(glGetTextureHandleIMG); \
   FUNC(glGetTextureHandleNV); \
-  FUNC(glGetTextureSamplerHandleARB); \
   FUNC(glGetTextureSamplerHandleIMG); \
   FUNC(glGetTextureSamplerHandleNV); \
   FUNC(glGetTrackMatrixivNV); \
@@ -3371,15 +3384,11 @@
   FUNC(glLockArraysEXT); \
   FUNC(glMakeBufferNonResidentNV); \
   FUNC(glMakeBufferResidentNV); \
-  FUNC(glMakeImageHandleNonResidentARB); \
   FUNC(glMakeImageHandleNonResidentNV); \
-  FUNC(glMakeImageHandleResidentARB); \
   FUNC(glMakeImageHandleResidentNV); \
   FUNC(glMakeNamedBufferNonResidentNV); \
   FUNC(glMakeNamedBufferResidentNV); \
-  FUNC(glMakeTextureHandleNonResidentARB); \
   FUNC(glMakeTextureHandleNonResidentNV); \
-  FUNC(glMakeTextureHandleResidentARB); \
   FUNC(glMakeTextureHandleResidentNV); \
   FUNC(glMap1d); \
   FUNC(glMap1f); \
@@ -4972,7 +4981,6 @@
   UnsupportedWrapper3(void, glGetHistogramParameteriv, GLenum, target, GLenum, pname, GLint *, params); \
   UnsupportedWrapper3(void, glGetHistogramParameterxvOES, GLenum, target, GLenum, pname, GLfixed *, params); \
   UnsupportedWrapper5(void, glGetHistogram, GLenum, target, GLboolean, reset, GLenum, format, GLenum, type, void *, values); \
-  UnsupportedWrapper5(GLuint64, glGetImageHandleARB, GLuint, texture, GLint, level, GLboolean, layered, GLint, layer, GLenum, format); \
   UnsupportedWrapper5(GLuint64, glGetImageHandleNV, GLuint, texture, GLint, level, GLboolean, layered, GLint, layer, GLenum, format); \
   UnsupportedWrapper3(void, glGetImageTransformParameterfvHP, GLenum, target, GLenum, pname, GLfloat *, params); \
   UnsupportedWrapper3(void, glGetImageTransformParameterivHP, GLenum, target, GLenum, pname, GLint *, params); \
@@ -5129,10 +5137,8 @@
   UnsupportedWrapper4(void, glGetTexLevelParameterxvOES, GLenum, target, GLint, level, GLenum, pname, GLfixed *, params); \
   UnsupportedWrapper3(void, glGetTexParameterPointervAPPLE, GLenum, target, GLenum, pname, void **, params); \
   UnsupportedWrapper3(void, glGetTexParameterxvOES, GLenum, target, GLenum, pname, GLfixed *, params); \
-  UnsupportedWrapper1(GLuint64, glGetTextureHandleARB, GLuint, texture); \
   UnsupportedWrapper1(GLuint64, glGetTextureHandleIMG, GLuint, texture); \
   UnsupportedWrapper1(GLuint64, glGetTextureHandleNV, GLuint, texture); \
-  UnsupportedWrapper2(GLuint64, glGetTextureSamplerHandleARB, GLuint, texture, GLuint, sampler); \
   UnsupportedWrapper2(GLuint64, glGetTextureSamplerHandleIMG, GLuint, texture, GLuint, sampler); \
   UnsupportedWrapper2(GLuint64, glGetTextureSamplerHandleNV, GLuint, texture, GLuint, sampler); \
   UnsupportedWrapper4(void, glGetTrackMatrixivNV, GLenum, target, GLuint, address, GLenum, pname, GLint *, params); \
@@ -5283,15 +5289,11 @@
   UnsupportedWrapper2(void, glLockArraysEXT, GLint, first, GLsizei, count); \
   UnsupportedWrapper1(void, glMakeBufferNonResidentNV, GLenum, target); \
   UnsupportedWrapper2(void, glMakeBufferResidentNV, GLenum, target, GLenum, access); \
-  UnsupportedWrapper1(void, glMakeImageHandleNonResidentARB, GLuint64, handle); \
   UnsupportedWrapper1(void, glMakeImageHandleNonResidentNV, GLuint64, handle); \
-  UnsupportedWrapper2(void, glMakeImageHandleResidentARB, GLuint64, handle, GLenum, access); \
   UnsupportedWrapper2(void, glMakeImageHandleResidentNV, GLuint64, handle, GLenum, access); \
   UnsupportedWrapper1(void, glMakeNamedBufferNonResidentNV, GLuint, buffer); \
   UnsupportedWrapper2(void, glMakeNamedBufferResidentNV, GLuint, buffer, GLenum, access); \
-  UnsupportedWrapper1(void, glMakeTextureHandleNonResidentARB, GLuint64, handle); \
   UnsupportedWrapper1(void, glMakeTextureHandleNonResidentNV, GLuint64, handle); \
-  UnsupportedWrapper1(void, glMakeTextureHandleResidentARB, GLuint64, handle); \
   UnsupportedWrapper1(void, glMakeTextureHandleResidentNV, GLuint64, handle); \
   UnsupportedWrapper6(void, glMap1d, GLenum, target, GLdouble, u1, GLdouble, u2, GLint, stride, GLint, order, const GLdouble *, points); \
   UnsupportedWrapper6(void, glMap1f, GLenum, target, GLfloat, u1, GLfloat, u2, GLint, stride, GLint, order, const GLfloat *, points); \
@@ -6378,7 +6380,7 @@
   UnsupportedWrapper6(void, glWriteMaskEXT, GLuint, res, GLuint, in, GLenum, outX, GLenum, outY, GLenum, outZ, GLenum, outW); \
 
 
-		
+        
 // the _renderdoc_hooked variants are to make sure we always have a function symbol exported that we
 // can return from GetProcAddress. On posix systems if another library (or the application itself)
 // creates a symbol called 'glEnable' we'll return the address of that, and break badly. Instead we
diff --git a/renderdoc/driver/gl/gl_driver.cpp b/renderdoc/driver/gl/gl_driver.cpp
index 1154a3c39..42d3fd2ee 100644
--- a/renderdoc/driver/gl/gl_driver.cpp
+++ b/renderdoc/driver/gl/gl_driver.cpp
@@ -256,6 +256,7 @@ void WrappedOpenGL::BuildGLExtensions()
   m_GLExtensions.push_back("GL_KHR_parallel_shader_compile");
   m_GLExtensions.push_back("GL_KHR_robustness");
   m_GLExtensions.push_back("GL_KHR_robust_buffer_access_behavior");
+  m_GLExtensions.push_back("GL_ARB_bindless_texture");
 
   // this WGL extension is advertised in the gl ext string instead of via the wgl ext string,
   // return it just in case anyone is checking for it via this place. On non-windows platforms
@@ -3934,6 +3935,14 @@ bool WrappedOpenGL::ProcessChunk(ReadSerialiser &ser, GLChunk chunk)
     case GLChunk::glPrimitiveBoundingBox:
       return Serialise_glPrimitiveBoundingBox(ser, 0, 0, 0, 0, 0, 0, 0, 0);
 
+    case GLChunk::glGetTextureHandleARB: return Serialise_glGetTextureHandleARB(ser, 0);
+    case GLChunk::glGetTextureSamplerHandleARB:
+      return Serialise_glGetTextureSamplerHandleARB(ser, 0, 0);
+    case GLChunk::glGetImageHandleARB:
+      return Serialise_glGetImageHandleARB(ser, 0, 0, GL_FALSE, 0, eGL_NONE);
+
+    case GLChunk::glSetHandleRangeRDOC: return Serialise_glSetHandleRangeRDOC(ser, 0, 0, 0);
+
     case GLChunk::glGenTextures: return Serialise_glGenTextures(ser, 0, 0);
     case GLChunk::glCreateTextures: return Serialise_glCreateTextures(ser, eGL_NONE, 0, 0);
     case GLChunk::glBindTexture: return Serialise_glBindTexture(ser, eGL_NONE, 0);
diff --git a/renderdoc/driver/gl/gl_driver.h b/renderdoc/driver/gl/gl_driver.h
index 70d901c7f..68d4d3ef6 100644
--- a/renderdoc/driver/gl/gl_driver.h
+++ b/renderdoc/driver/gl/gl_driver.h
@@ -96,6 +96,9 @@ private:
 
   bool m_SuppressDebugMessages;
 
+  std::map<GLuint64, GLuint64> m_HandleRemap;
+  std::set<ResourceId> m_BindlessResources;
+
   GLResource GetResource(GLenum identifier, GLuint name);
 
   void DebugSnoop(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length,
@@ -578,6 +581,11 @@ public:
   FrameRecord &GetFrameRecord() { return m_FrameRecord; }
   const APIEvent &GetEvent(uint32_t eventId);
 
+  bool IsBindlessResource(ResourceId id)
+  {
+    return m_BindlessResources.find(id) != m_BindlessResources.end();
+  }
+
   const DrawcallDescription &GetRootDraw() { return m_ParentDrawcall; }
   const DrawcallDescription *GetDrawcall(uint32_t eventId);
 
@@ -2456,6 +2464,19 @@ public:
   IMPLEMENT_FUNCTION_SERIALISED(void, glGetPerfQueryInfoINTEL, GLuint queryId,
                                 GLuint queryNameLength, GLchar *queryName, GLuint *dataSize,
                                 GLuint *noCounters, GLuint *noInstances, GLuint *capsMask);
+
+  // ARB_bindless_texture
+  IMPLEMENT_FUNCTION_SERIALISED(GLuint64, glGetTextureHandleARB, GLuint texture);
+  IMPLEMENT_FUNCTION_SERIALISED(GLuint64, glGetTextureSamplerHandleARB, GLuint texture,
+                                GLuint sampler);
+  IMPLEMENT_FUNCTION_SERIALISED(GLuint64, glGetImageHandleARB, GLuint texture, GLint level,
+                                GLboolean layered, GLint layer, GLenum format);
+  void glMakeTextureHandleResidentARB(GLuint64 handle);
+  void glMakeTextureHandleNonResidentARB(GLuint64 handle);
+  void glMakeImageHandleResidentARB(GLuint64 handle, GLenum access);
+  void glMakeImageHandleNonResidentARB(GLuint64 handle);
+  IMPLEMENT_FUNCTION_SERIALISED(void, glSetHandleRangeRDOC, GLuint buffer, GLuint64 offset,
+                                GLuint64 range);
 };
 
 class ScopedDebugContext
diff --git a/renderdoc/driver/gl/gl_hooks.cpp b/renderdoc/driver/gl/gl_hooks.cpp
index 00c89520e..74342322b 100644
--- a/renderdoc/driver/gl/gl_hooks.cpp
+++ b/renderdoc/driver/gl/gl_hooks.cpp
@@ -177,7 +177,9 @@ bool FullyImplementedFunction(const char *funcname)
       !strcmp(funcname, "glGetDebugMessageLogKHR") || !strcmp(funcname, "glGetPointervKHR") ||
       !strcmp(funcname, "glPushDebugGroupKHR") || !strcmp(funcname, "glPopDebugGroupKHR") ||
       !strcmp(funcname, "glObjectLabelKHR") || !strcmp(funcname, "glGetObjectLabelKHR") ||
-      !strcmp(funcname, "glObjectPtrLabelKHR") || !strcmp(funcname, "glGetObjectPtrLabelKHR");
+      !strcmp(funcname, "glObjectPtrLabelKHR") || !strcmp(funcname, "glGetObjectPtrLabelKHR") ||
+      // ARB_bindless_texture.... sort of...
+      !strcmp(funcname, "glSetHandleRangeRDOC");
 }
 
 void *HookedGetProcAddress(const char *func, void *realFunc)
diff --git a/renderdoc/driver/gl/gl_initstate.cpp b/renderdoc/driver/gl/gl_initstate.cpp
index bb195767b..c24a98773 100644
--- a/renderdoc/driver/gl/gl_initstate.cpp
+++ b/renderdoc/driver/gl/gl_initstate.cpp
@@ -1890,6 +1890,7 @@ void GLResourceManager::Apply_InitialState(GLResource live, const GLInitialConte
   {
     ResourceId Id = GetID(live);
     WrappedOpenGL::TextureData &details = m_Driver->m_Textures[Id];
+    bool bindless = m_Driver->IsBindlessResource(Id);
 
     const TextureStateInitialData &state = initial.tex;
 
@@ -1904,27 +1905,30 @@ void GLResourceManager::Apply_InitialState(GLResource live, const GLInitialConte
       {
         int mips = GetNumMips(details.curType, tex, details.width, details.height, details.depth);
 
-        // we need to set maxlevel appropriately for number of mips to force the texture to be
-        // complete. This can happen if e.g. a texture is initialised just by default with
-        // glTexImage for level 0 and used as a framebuffer attachment, then the implementation is
-        // fine with it.
-        // Unfortunately glCopyImageSubData requires completeness across all mips, a stricter
-        // requirement :(.
-        // We set max_level to mips - 1 (so mips=1 means MAX_LEVEL=0). Then below where we set the
-        // texture state, the correct MAX_LEVEL is set to whatever the program had.
-        int maxlevel = mips - 1;
-        GL.glTextureParameterivEXT(live.name, details.curType, eGL_TEXTURE_MAX_LEVEL,
-                                   (GLint *)&maxlevel);
-
-        // set min/mag filters to NEAREST since we are doing an identity copy. Avoids issues where
-        // the spec says that e.g. integer or stencil textures cannot have a LINEAR filter
-        if(!ms)
+        if(!bindless)
         {
-          GLenum nearest = eGL_NEAREST;
-          GL.glTextureParameterivEXT(live.name, details.curType, eGL_TEXTURE_MIN_FILTER,
-                                     (GLint *)&nearest);
-          GL.glTextureParameterivEXT(live.name, details.curType, eGL_TEXTURE_MAG_FILTER,
-                                     (GLint *)&nearest);
+          // we need to set maxlevel appropriately for number of mips to force the texture to be
+          // complete. This can happen if e.g. a texture is initialised just by default with
+          // glTexImage for level 0 and used as a framebuffer attachment, then the implementation is
+          // fine with it.
+          // Unfortunately glCopyImageSubData requires completeness across all mips, a stricter
+          // requirement :(.
+          // We set max_level to mips - 1 (so mips=1 means MAX_LEVEL=0). Then below where we set the
+          // texture state, the correct MAX_LEVEL is set to whatever the program had.
+          int maxlevel = mips - 1;
+          GL.glTextureParameterivEXT(live.name, details.curType, eGL_TEXTURE_MAX_LEVEL,
+                                     (GLint *)&maxlevel);
+
+          // set min/mag filters to NEAREST since we are doing an identity copy. Avoids issues where
+          // the spec says that e.g. integer or stencil textures cannot have a LINEAR filter
+          if(!ms)
+          {
+            GLenum nearest = eGL_NEAREST;
+            GL.glTextureParameterivEXT(live.name, details.curType, eGL_TEXTURE_MIN_FILTER,
+                                       (GLint *)&nearest);
+            GL.glTextureParameterivEXT(live.name, details.curType, eGL_TEXTURE_MAG_FILTER,
+                                       (GLint *)&nearest);
+          }
         }
 
         bool iscomp = IsCompressedFormat(details.internalFormat);
@@ -2051,59 +2055,64 @@ void GLResourceManager::Apply_InitialState(GLResource live, const GLInitialConte
         }
       }
 
-      if((state.depthMode == eGL_DEPTH_COMPONENT || state.depthMode == eGL_STENCIL_INDEX) &&
-         HasExt[ARB_stencil_texturing])
-        GL.glTextureParameterivEXT(live.name, details.curType, eGL_DEPTH_STENCIL_TEXTURE_MODE,
-                                   (GLint *)&state.depthMode);
-
-      if((details.curType == eGL_TEXTURE_CUBE_MAP || details.curType == eGL_TEXTURE_CUBE_MAP_ARRAY) &&
-         HasExt[ARB_seamless_cubemap_per_texture])
-        GL.glTextureParameterivEXT(live.name, details.curType, eGL_TEXTURE_CUBE_MAP_SEAMLESS,
-                                   (GLint *)&state.seamless);
-
-      GL.glTextureParameterivEXT(live.name, details.curType, eGL_TEXTURE_BASE_LEVEL,
-                                 (GLint *)&state.baseLevel);
-      GL.glTextureParameterivEXT(live.name, details.curType, eGL_TEXTURE_MAX_LEVEL,
-                                 (GLint *)&state.maxLevel);
-
-      // assume that emulated (luminance, alpha-only etc) textures are not swizzled
-      if(!details.emulated && (HasExt[ARB_texture_swizzle] || HasExt[EXT_texture_swizzle]))
-      {
-        SetTextureSwizzle(live.name, details.curType, state.swizzle);
-      }
-
-      if(!ms)
+      if(!bindless)
       {
-        if(HasExt[EXT_texture_sRGB_decode])
-          GL.glTextureParameterivEXT(live.name, details.curType, eGL_TEXTURE_SRGB_DECODE_EXT,
-                                     (GLint *)&state.srgbDecode);
-        GL.glTextureParameterivEXT(live.name, details.curType, eGL_TEXTURE_COMPARE_FUNC,
-                                   (GLint *)&state.compareFunc);
-        GL.glTextureParameterivEXT(live.name, details.curType, eGL_TEXTURE_COMPARE_MODE,
-                                   (GLint *)&state.compareMode);
-        GL.glTextureParameterivEXT(live.name, details.curType, eGL_TEXTURE_MIN_FILTER,
-                                   (GLint *)&state.minFilter);
-        GL.glTextureParameterivEXT(live.name, details.curType, eGL_TEXTURE_MAG_FILTER,
-                                   (GLint *)&state.magFilter);
-        GL.glTextureParameterivEXT(live.name, details.curType, eGL_TEXTURE_WRAP_R,
-                                   (GLint *)&state.wrap[0]);
-        GL.glTextureParameterivEXT(live.name, details.curType, eGL_TEXTURE_WRAP_S,
-                                   (GLint *)&state.wrap[1]);
-        GL.glTextureParameterivEXT(live.name, details.curType, eGL_TEXTURE_WRAP_T,
-                                   (GLint *)&state.wrap[2]);
+        if((state.depthMode == eGL_DEPTH_COMPONENT || state.depthMode == eGL_STENCIL_INDEX) &&
+           HasExt[ARB_stencil_texturing])
+          GL.glTextureParameterivEXT(live.name, details.curType, eGL_DEPTH_STENCIL_TEXTURE_MODE,
+                                     (GLint *)&state.depthMode);
+
+        if((details.curType == eGL_TEXTURE_CUBE_MAP || details.curType == eGL_TEXTURE_CUBE_MAP_ARRAY) &&
+           HasExt[ARB_seamless_cubemap_per_texture])
+          GL.glTextureParameterivEXT(live.name, details.curType, eGL_TEXTURE_CUBE_MAP_SEAMLESS,
+                                     (GLint *)&state.seamless);
+
+        GL.glTextureParameterivEXT(live.name, details.curType, eGL_TEXTURE_BASE_LEVEL,
+                                   (GLint *)&state.baseLevel);
+        GL.glTextureParameterivEXT(live.name, details.curType, eGL_TEXTURE_MAX_LEVEL,
+                                   (GLint *)&state.maxLevel);
 
-        // see fetch in PrepareTextureInitialContents
-        if(HasExt[ARB_texture_border_clamp])
-          GL.glTextureParameterfvEXT(live.name, details.curType, eGL_TEXTURE_BORDER_COLOR,
-                                     state.border);
+        // assume that emulated (luminance, alpha-only etc) textures are not swizzled
+        if(!details.emulated && (HasExt[ARB_texture_swizzle] || HasExt[EXT_texture_swizzle]))
+        {
+          SetTextureSwizzle(live.name, details.curType, state.swizzle);
+        }
 
-        if(!IsGLES)
-          GL.glTextureParameterfvEXT(live.name, details.curType, eGL_TEXTURE_LOD_BIAS,
-                                     &state.lodBias);
-        if(details.curType != eGL_TEXTURE_RECTANGLE)
+        if(!ms)
         {
-          GL.glTextureParameterfvEXT(live.name, details.curType, eGL_TEXTURE_MIN_LOD, &state.minLod);
-          GL.glTextureParameterfvEXT(live.name, details.curType, eGL_TEXTURE_MAX_LOD, &state.maxLod);
+          if(HasExt[EXT_texture_sRGB_decode])
+            GL.glTextureParameterivEXT(live.name, details.curType, eGL_TEXTURE_SRGB_DECODE_EXT,
+                                       (GLint *)&state.srgbDecode);
+          GL.glTextureParameterivEXT(live.name, details.curType, eGL_TEXTURE_COMPARE_FUNC,
+                                     (GLint *)&state.compareFunc);
+          GL.glTextureParameterivEXT(live.name, details.curType, eGL_TEXTURE_COMPARE_MODE,
+                                     (GLint *)&state.compareMode);
+          GL.glTextureParameterivEXT(live.name, details.curType, eGL_TEXTURE_MIN_FILTER,
+                                     (GLint *)&state.minFilter);
+          GL.glTextureParameterivEXT(live.name, details.curType, eGL_TEXTURE_MAG_FILTER,
+                                     (GLint *)&state.magFilter);
+          GL.glTextureParameterivEXT(live.name, details.curType, eGL_TEXTURE_WRAP_R,
+                                     (GLint *)&state.wrap[0]);
+          GL.glTextureParameterivEXT(live.name, details.curType, eGL_TEXTURE_WRAP_S,
+                                     (GLint *)&state.wrap[1]);
+          GL.glTextureParameterivEXT(live.name, details.curType, eGL_TEXTURE_WRAP_T,
+                                     (GLint *)&state.wrap[2]);
+
+          // see fetch in PrepareTextureInitialContents
+          if(HasExt[ARB_texture_border_clamp])
+            GL.glTextureParameterfvEXT(live.name, details.curType, eGL_TEXTURE_BORDER_COLOR,
+                                       state.border);
+
+          if(!IsGLES)
+            GL.glTextureParameterfvEXT(live.name, details.curType, eGL_TEXTURE_LOD_BIAS,
+                                       &state.lodBias);
+          if(details.curType != eGL_TEXTURE_RECTANGLE)
+          {
+            GL.glTextureParameterfvEXT(live.name, details.curType, eGL_TEXTURE_MIN_LOD,
+                                       &state.minLod);
+            GL.glTextureParameterfvEXT(live.name, details.curType, eGL_TEXTURE_MAX_LOD,
+                                       &state.maxLod);
+          }
         }
       }
     }
@@ -2308,7 +2317,7 @@ void GLResourceManager::Apply_InitialState(GLResource live, const GLInitialConte
   {
     const SamplerInitialData &data = initial.samp;
 
-    if(data.valid)
+    if(data.valid && !m_Driver->IsBindlessResource(GetID(live)))
     {
       GLenum activeTexture = eGL_TEXTURE0;
       GL.glGetIntegerv(eGL_ACTIVE_TEXTURE, (GLint *)&activeTexture);
diff --git a/renderdoc/driver/gl/official/glext.h b/renderdoc/driver/gl/official/glext.h
index 3f24c93d4..604c3efd3 100644
--- a/renderdoc/driver/gl/official/glext.h
+++ b/renderdoc/driver/gl/official/glext.h
@@ -12594,6 +12594,14 @@ GLAPI void APIENTRY glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN (co
 #define GL_FOG_SPECULAR_TEXTURE_WIN       0x80EC
 #endif /* GL_WIN_specular_fog */
 
+#ifndef GL_RDOC_bindless_helper
+#define GL_RDOC_bindless_helper 1
+typedef void (APIENTRYP PFNGLSETHANDLERANGERDOCPROC) (GLuint buffer, GLuint64 offset, GLuint64 range);
+#ifdef GL_GLEXT_PROTOTYPES
+GLAPI void APIENTRY glSetHandleRangeRDOC (GLuint buffer, GLuint64 offset, GLuint64 range);
+#endif
+#endif /* GL_RDOC_bindless_helper */
+
 #ifdef __cplusplus
 }
 #endif
diff --git a/renderdoc/driver/gl/wrappers/gl_texture_funcs.cpp b/renderdoc/driver/gl/wrappers/gl_texture_funcs.cpp
index 95637886a..26bfc8983 100644
--- a/renderdoc/driver/gl/wrappers/gl_texture_funcs.cpp
+++ b/renderdoc/driver/gl/wrappers/gl_texture_funcs.cpp
@@ -6636,6 +6636,231 @@ void WrappedOpenGL::glTextureFoveationParametersQCOM(GLuint texture, GLuint laye
 
 #pragma endregion
 
+template <typename SerialiserType>
+bool WrappedOpenGL::Serialise_glGetTextureHandleARB(SerialiserType &ser, GLuint textureHandle)
+{
+  SERIALISE_ELEMENT_LOCAL(texture, TextureRes(GetCtx(), textureHandle));
+  SERIALISE_ELEMENT_LOCAL(handle, GL.glGetTextureHandleARB(textureHandle));
+
+  SERIALISE_CHECK_READ_ERRORS();
+
+  if(IsReplayingAndReading())
+  {
+    ResourceId id = GetResourceManager()->GetID(texture);
+    GLuint64 replayHandle = GL.glGetTextureHandleARB(texture.name);
+    m_HandleRemap[handle] = replayHandle;
+    RDCDEBUG("Remapping handle %llx to %llx for texture %s", handle, m_HandleRemap[handle],
+             ToStr(id).c_str());
+
+    // make all textures resident unconditionally.
+    GL.glMakeTextureHandleResidentARB(replayHandle);
+
+    // TODO store replayHandle for looking up in UI
+    m_BindlessResources.insert(id);
+
+    AddResourceInitChunk(texture);
+  }
+
+  return true;
+}
+
+GLuint64 WrappedOpenGL::glGetTextureHandleARB(GLuint texture)
+{
+  GLuint64 ret;
+  SERIALISE_TIME_CALL(ret = GL.glGetTextureHandleARB(texture));
+
+  if(IsCaptureMode(m_State))
+  {
+    USE_SCRATCH_SERIALISER();
+    SCOPED_SERIALISE_CHUNK(gl_CurChunk);
+    Serialise_glGetTextureHandleARB(ser, texture);
+
+    GLResourceRecord *record = GetResourceManager()->GetResourceRecord(TextureRes(GetCtx(), texture));
+
+    record->AddChunk(scope.Get());
+  }
+
+  return ret;
+}
+
+template <typename SerialiserType>
+bool WrappedOpenGL::Serialise_glGetTextureSamplerHandleARB(SerialiserType &ser, GLuint textureHandle,
+                                                           GLuint samplerHandle)
+{
+  SERIALISE_ELEMENT_LOCAL(texture, TextureRes(GetCtx(), textureHandle));
+  SERIALISE_ELEMENT_LOCAL(sampler, SamplerRes(GetCtx(), samplerHandle));
+  SERIALISE_ELEMENT_LOCAL(handle, GL.glGetTextureSamplerHandleARB(textureHandle, samplerHandle));
+
+  SERIALISE_CHECK_READ_ERRORS();
+
+  if(IsReplayingAndReading())
+  {
+    ResourceId texId = GetResourceManager()->GetID(texture);
+    ResourceId sampId = GetResourceManager()->GetID(sampler);
+
+    GLuint64 replayHandle = GL.glGetTextureSamplerHandleARB(texture.name, sampler.name);
+    m_HandleRemap[handle] = replayHandle;
+    RDCDEBUG("Remapping handle %llx to %llx for texture %s and sampler %s", handle, replayHandle,
+             ToStr(texId).c_str(), ToStr(sampId).c_str());
+
+    // make all textures resident unconditionally.
+    GL.glMakeTextureHandleResidentARB(replayHandle);
+
+    // TODO store replayHandle for looking up in UI
+    m_BindlessResources.insert(texId);
+    m_BindlessResources.insert(sampId);
+
+    AddResourceInitChunk(texture);
+  }
+
+  return true;
+}
+
+GLuint64 WrappedOpenGL::glGetTextureSamplerHandleARB(GLuint texture, GLuint sampler)
+{
+  GLuint64 ret;
+  SERIALISE_TIME_CALL(ret = GL.glGetTextureSamplerHandleARB(texture, sampler));
+
+  if(IsCaptureMode(m_State))
+  {
+    USE_SCRATCH_SERIALISER();
+    SCOPED_SERIALISE_CHUNK(gl_CurChunk);
+    Serialise_glGetTextureSamplerHandleARB(ser, texture, sampler);
+
+    GLResourceRecord *record = GetResourceManager()->GetResourceRecord(TextureRes(GetCtx(), texture));
+
+    record->AddChunk(scope.Get());
+  }
+
+  return ret;
+}
+
+template <typename SerialiserType>
+bool WrappedOpenGL::Serialise_glGetImageHandleARB(SerialiserType &ser, GLuint textureHandle,
+                                                  GLint level, GLboolean layered, GLint layer,
+                                                  GLenum format)
+{
+  SERIALISE_ELEMENT_LOCAL(texture, TextureRes(GetCtx(), textureHandle));
+  SERIALISE_ELEMENT(level);
+  SERIALISE_ELEMENT(layered);
+  SERIALISE_ELEMENT(layer);
+  SERIALISE_ELEMENT(format);
+  SERIALISE_ELEMENT_LOCAL(handle,
+                          GL.glGetImageHandleARB(textureHandle, level, layered, layer, format));
+
+  SERIALISE_CHECK_READ_ERRORS();
+
+  if(IsReplayingAndReading())
+  {
+    ResourceId id = GetResourceManager()->GetID(texture);
+
+    GLuint64 replayHandle = GL.glGetImageHandleARB(texture.name, level, layered, layer, format);
+    m_HandleRemap[handle] = replayHandle;
+    RDCDEBUG("Remapping handle %llx to %llx for image %s level %i layer %i format %s", handle,
+             replayHandle, ToStr(id).c_str(), level, layer, ToStr(format).c_str());
+
+    // make all textures resident unconditionally. Just assume read/write
+    GL.glMakeImageHandleResidentARB(replayHandle, eGL_READ_WRITE);
+
+    // TODO store replayHandle for looking up in UI
+    m_BindlessResources.insert(id);
+
+    AddResourceInitChunk(texture);
+  }
+
+  return true;
+}
+
+GLuint64 WrappedOpenGL::glGetImageHandleARB(GLuint texture, GLint level, GLboolean layered,
+                                            GLint layer, GLenum format)
+{
+  GLuint64 ret;
+  SERIALISE_TIME_CALL(ret = GL.glGetImageHandleARB(texture, level, layered, layer, format));
+
+  if(IsCaptureMode(m_State))
+  {
+    USE_SCRATCH_SERIALISER();
+    SCOPED_SERIALISE_CHUNK(gl_CurChunk);
+    Serialise_glGetImageHandleARB(ser, texture, level, layered, layer, format);
+
+    GLResourceRecord *record = GetResourceManager()->GetResourceRecord(TextureRes(GetCtx(), texture));
+
+    record->AddChunk(scope.Get());
+  }
+
+  return ret;
+}
+
+void WrappedOpenGL::glMakeTextureHandleResidentARB(GLuint64 handle)
+{
+  return GL.glMakeTextureHandleResidentARB(handle);
+}
+
+void WrappedOpenGL::glMakeTextureHandleNonResidentARB(GLuint64 handle)
+{
+  return GL.glMakeTextureHandleNonResidentARB(handle);
+}
+
+void WrappedOpenGL::glMakeImageHandleResidentARB(GLuint64 handle, GLenum access)
+{
+  return GL.glMakeImageHandleResidentARB(handle, access);
+}
+
+void WrappedOpenGL::glMakeImageHandleNonResidentARB(GLuint64 handle)
+{
+  return GL.glMakeImageHandleNonResidentARB(handle);
+}
+
+template <typename SerialiserType>
+bool WrappedOpenGL::Serialise_glSetHandleRangeRDOC(SerialiserType &ser, GLuint bufferHandle,
+                                                   GLuint64 offset, GLuint64 range)
+{
+  SERIALISE_ELEMENT_LOCAL(buffer, BufferRes(GetCtx(), bufferHandle));
+  SERIALISE_ELEMENT(offset);
+  SERIALISE_ELEMENT(range);
+
+  SERIALISE_CHECK_READ_ERRORS();
+
+  if(IsReplayingAndReading())
+  {
+    uint64_t *ptr = (uint64_t *)GL.glMapNamedBufferRangeEXT(buffer.name, offset, range,
+                                                            GL_MAP_WRITE_BIT | GL_MAP_READ_BIT);
+
+    while(range >= 8)
+    {
+      auto it = m_HandleRemap.find(*ptr);
+      if(it != m_HandleRemap.end())
+        *ptr = it->second;
+      ptr++;
+      range -= 8;
+    }
+
+    GL.glUnmapNamedBufferEXT(buffer.name);
+  }
+
+  return true;
+}
+
+void WrappedOpenGL::glSetHandleRangeRDOC(GLuint buffer, GLuint64 offset, GLuint64 range)
+{
+  SERIALISE_TIME_CALL();
+
+  if(IsActiveCapturing(m_State))
+  {
+    USE_SCRATCH_SERIALISER();
+    SCOPED_SERIALISE_CHUNK(gl_CurChunk);
+    Serialise_glSetHandleRangeRDOC(ser, buffer, offset, range);
+
+    GetContextRecord()->AddChunk(scope.Get());
+
+    CaptureOptions opts = RenderDoc::Inst().GetCaptureOptions();
+    if(!opts.refAllResources)
+      RDCLOG("Forcing on ref all resources for use of ARB_bindless_texture");
+    opts.refAllResources = true;
+    RenderDoc::Inst().SetCaptureOptions(opts);
+  }
+}
+
 INSTANTIATE_FUNCTION_SERIALISED(void, glGenTextures, GLsizei n, GLuint *textures);
 INSTANTIATE_FUNCTION_SERIALISED(void, glCreateTextures, GLenum target, GLsizei n, GLuint *textures);
 INSTANTIATE_FUNCTION_SERIALISED(void, glBindTexture, GLenum target, GLuint texture);
@@ -6743,4 +6968,11 @@ INSTANTIATE_FUNCTION_SERIALISED(void, glTextureBufferEXT, GLuint texture, GLenum
                                 GLenum internalformat, GLuint buffer);
 INSTANTIATE_FUNCTION_SERIALISED(void, glTextureFoveationParametersQCOM, GLuint texture,
                                 GLuint layer, GLuint focalPoint, GLfloat focalX, GLfloat focalY,
-                                GLfloat gainX, GLfloat gainY, GLfloat foveaArea);
\ No newline at end of file
+                                GLfloat gainX, GLfloat gainY, GLfloat foveaArea);
+INSTANTIATE_FUNCTION_SERIALISED(GLuint64, glGetTextureHandleARB, GLuint texture);
+INSTANTIATE_FUNCTION_SERIALISED(GLuint64, glGetTextureSamplerHandleARB, GLuint texture,
+                                GLuint sampler);
+INSTANTIATE_FUNCTION_SERIALISED(GLuint64, glGetImageHandleARB, GLuint texture, GLint level,
+                                GLboolean layered, GLint layer, GLenum format);
+INSTANTIATE_FUNCTION_SERIALISED(void, glSetHandleRangeRDOC, GLuint buffer, GLuint64 offset,
+                                GLuint64 range);
\ No newline at end of file
